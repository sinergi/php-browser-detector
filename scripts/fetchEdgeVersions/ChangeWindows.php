<?php

/**
 * Fetch versions from changewindows.org
 * Â© 2014-present CHANGEWINDOWS
 *
 * Disclaimer
 * All trademarks mentioned are the property of their respective owners. The content generated by this script
 * comes from changewindows.org and may not be accurate.
 */
class ChangeWindows
{
    private static $errors = array(
        'could_not_fetch_version' => 'Could not fetch current version from ChangeWindows',
        'invalid_version' => 'Windows version is invalid',
        'could_not_fetch_page' => 'Could not fetch page from ChangeWindows'
    );

    public static function fetchVersions()
    {
        $windowsVersions = json_decode(file_get_contents(__DIR__ . '/windowsVersions.json'), true);
        if (!count($windowsVersions)) {
            $currentVersion = explode('.', self::fetchCurrentVersion(), 2);
            if (!isset($currentVersion[0])) {
                throw new Exception(self::$errors['invalid_version']);
            }
            $windowsVersions = self::fetchVersion($windowsVersions, $currentVersion[0]);
            self::writeWindowsVersions($windowsVersions);
        } else {
            reset($windowsVersions);
            $firstVersion = key($windowsVersions);
            end($windowsVersions);
            $lastVersion = key($windowsVersions);

            try {
                $result = self::fetchVersion($windowsVersions, $firstVersion);
                $windowsVersions = $result;
            } catch (Exception $e) {
            }

            $windowsVersions = self::fetchVersion($windowsVersions, $lastVersion);
            self::writeWindowsVersions($windowsVersions);
        }
    }

    private static function fetchVersion($windowsVersions, $version)
    {
        $siblingVersions = self::fetchPage($version);
        $windowsVersions[$version] = true;
        self::writeWindowsVersions($windowsVersions);

        if (isset($siblingVersions[0]) && !isset($windowsVersions[$siblingVersions[0]])) {
            $windowsVersions = self::fetchVersion($windowsVersions, $siblingVersions[0]);
        }

        if (isset($siblingVersions[1]) && !isset($windowsVersions[$siblingVersions[1]])) {
            $windowsVersions = self::fetchVersion($windowsVersions, $siblingVersions[1]);
        }

        return $windowsVersions;
    }

    private static function writeWindowsVersions($windowsVersions)
    {
        ksort($windowsVersions);
        file_put_contents(__DIR__ . '/windowsVersions.json', json_encode($windowsVersions, JSON_PRETTY_PRINT));
    }

    private static function fetchCurrentVersion()
    {
        $content = file_get_contents('https://changewindows.org/filter/pc/all/current/month/true');
        if (!$content) {
            throw new Exception(self::$errors['could_not_fetch_version']);
        }
        $content = explode('class="timeline"', $content, 2);
        if (!isset($content[1])) {
            throw new Exception(self::$errors['could_not_fetch_version']);
        }
        $content = explode('build"', $content[1], 2);
        if (!isset($content[1])) {
            throw new Exception(self::$errors['could_not_fetch_version']);
        }
        preg_match("/(\d*\.\d*)<\/div>/", $content[1], $matches);
        if (!isset($matches[1])) {
            throw new Exception(self::$errors['could_not_fetch_version']);
        }
        return $matches[1];
    }

    private static function fetchPage($version)
    {
        $url = "https://changewindows.org/build/{$version}/pc";
        $content = file_get_contents($url);
        $siblingVersions = self::fetchSiblingVersions($content);
        self::fetchEdgeVersion($content);
        return $siblingVersions;
    }

    private static function fetchEdgeVersion($content)
    {
        preg_match('/<h4[^>]*> *Edge ([\d\.]*) *<\/h4>/', $content, $edge);
        preg_match('/<h4[^>]*>EdgeHTML ([\d\.]*)<\/h4>/', $content, $edgeHtml);

        if (isset($edge[1]) && isset($edgeHtml[1])) {
            self::writeEdgeVersion($edgeHtml[1], $edge[1]);
        }
        return null;
    }

    private static function writeEdgeVersion($edgeHtml, $edge)
    {
        $file = __DIR__ . '/../../src/edgeVersionMap.php';
        $currentVersions = require $file;
        if (!isset($currentVersions[$edgeHtml])) {
            $currentVersions[$edgeHtml] = $edge;
            ksort($currentVersions);
            $content = '';
            foreach ($currentVersions as $edgeHtml => $edge) {
                $content .= "    '{$edgeHtml}' => '{$edge}'," . PHP_EOL;
            }
            $data = <<<PHP
<?php

return array(
    %s
);

PHP;
            file_put_contents($file, sprintf($data, trim($content)));
        }
    }

    private static function fetchSiblingVersions($content)
    {
        if (!$content) {
            throw new Exception(self::$errors['could_not_fetch_page']);
        }
        $content = explode('build-sidebar', $content, 2);
        if (!isset($content[1])) {
            throw new Exception(self::$errors['could_not_fetch_page']);
        }
        $content = explode('fa-angle-left', $content[1]);
        if (!isset($content[1])) {
            throw new Exception(self::$errors['could_not_fetch_page']);
        }
        $content = explode('fa-angle-right', $content[1]);
        if (!isset($content[0])) {
            throw new Exception(self::$errors['could_not_fetch_page']);
        }
        preg_match_all("/> *(\d+) *</", $content[0], $matches);
        if (!isset($matches[1])) {
            throw new Exception(self::$errors['could_not_fetch_page']);
        }
        return $matches[1];
    }
}
